{"version":3,"sources":["Filters.js","Ross.js","Rosses.js","serviceWorker.js","index.js","App.js"],"names":["filtersDefault","trees","frame","water","manmade","FilterContext","React","createContext","Filters","useContext","getFilters","setFilters","handleFilterUpdate","event","undefined","target","dataset","checkedAlone","closest","querySelectorAll","forEach","input","checked","length","querySelector","newFilters","name","waterFeatures","push","value","join","className","htmlFor","onClick","defaultChecked","type","id","onChange","label","data-special-checkboxes","class","data-checked-alone","Ross","props","rossFeatures","useMemo","features","Object","keys","details","key","EPISODE","TITLE","map","c","replace","toLowerCase","rossData","Rosses","useState","getRosses","setRosses","getFilteredRosses","setFilteredRosses","getFilterDetails","setFilterDetails","useEffect","buildFilterDetails","document","fieldset","option","filter","indexOf","Parser","parse","header","download","skipEmptyLines","complete","results","data","filteredRosses","ross","thisRossKept","toUpperCase","thisFiltersValues","split","filterValue","rossKeys","checkValues","rossKey","index","style","display","JSON","stringify","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","Provider","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bef91887.chunk.js","sourcesContent":["import React, {useContext} from 'react';\n\n// The default values for the filter\nexport const filtersDefault = {\n//\thaveFiltered: false,\n\ttrees: \t '*',\n\tframe: \t '*',\n\twater:   '*',\n\tmanmade: '*',\n}\n\n// Filter context shared between the Filters and the Rosses\nexport const FilterContext = React.createContext(filtersDefault);\n\n// The actual filter component\nexport function Filters() {\n\n\t// Since we share the filters between the filters component and the rosses component we have to above, pull it in\n\tconst {getFilters, setFilters} = useContext(FilterContext)\n\n\t// Handle the update of the filters\n\tfunction handleFilterUpdate(event){\n\t\t\n\t\t// We have special checkboxes that need to act like radios is some are selected, and normal checkboxes if others are selected. \n\t\t// Checkboxes are stored in a comma seperated string for simplicity\n\t\tif(event.target.dataset.checkedAlone!==undefined){\n\t\t\t// If it's one of the items that should be checked along clear all checked int he fieldset and then re-check the desired item\n\t\t\tevent.target.closest('fieldset').querySelectorAll('input[type=\"checkbox\"]').forEach(input => {\n\t\t\t\tinput.checked = false;\n\t\t\t});\n\t\t\tevent.target.checked = true;\n\t\t}else{\n\t\t\t// So you clicked one that isn't exclusive, so make sure none of the exclusive ones are checked.\n\t\t\tevent.target.closest('fieldset').querySelectorAll('input[type=\"checkbox\"][data-checked-alone]').forEach(input => {\n\t\t\t\tinput.checked = false;\n\t\t\t});\n\t\t}\n\t\t// And a final bit, if nothing is checked in checkbox section select the very first item in it\n\t\tif(event.target.closest('fieldset[data-special-checkboxes]')!==null){\n\t\t\tif(event.target.closest('fieldset').querySelectorAll('fieldset[data-special-checkboxes] input:checked').length===0){\n\t\t\t\tevent.target.closest('fieldset').querySelector('fieldset[data-special-checkboxes] input').checked = true\n\t\t\t}\n\t\t}\n\n\t\t// Most are simply updated, but some need a little work before we can save their state\n\t\tlet newFilters = getFilters\n\t\tswitch(event.target.name){\n\n\t\t\tcase 'water': \n\t\t\tcase 'manmade':\n\t\t\t\tlet waterFeatures = [];\n\t\t\t\tnewFilters[event.target.name] = event.target.closest('fieldset').querySelectorAll('input[type=\"checkbox\"]').forEach((input)=>{\n\t\t\t\t\tif(input.checked){\n\t\t\t\t\t\twaterFeatures.push(input.value)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tnewFilters[event.target.name] = waterFeatures.join(',')\n\t\t\tbreak;\n\t\t\t\n\t\t\t// The majority of cases\n\t\t\tdefault:\n\t\t\t\tnewFilters[event.target.name] = event.target.value;\n\t\t\tbreak;\n\t\t}\n\n\t\t// Finally save\n\t\tsetFilters({...getFilters})\n\t}\n\n\treturn (<form className=\"container w-1/1 mx-auto my-5\">\n\t\t\n\t\t<fieldset className=\"border-green-700 border-t-8\">\n\t\t\t<legend className=\"text-green-800 font-bold pr-2 text-lg\">Trees</legend>\n\t\t\t<label htmlFor=\"trees-*\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.trees==='*'}    className=\"align-text-top mr-1\" type=\"radio\" name=\"trees\" id=\"trees-*\"  value=\"*\" />\n\t\t\t\tIrregardless of Trees\n\t\t\t</label>\n\t\t\t<label htmlFor=\"trees-no\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.trees==='no'}   className=\"align-text-top mr-1\" type=\"radio\" name=\"trees\" id=\"trees-no\"   value=\"no\" />\n\t\t\t\tNo Trees\n\t\t\t</label>\n\t\t\t<label htmlFor=\"trees-one\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.trees==='one'}  className=\"align-text-top mr-1\" type=\"radio\" name=\"trees\" id=\"trees-one\"  value=\"one\" />\n\t\t\t\tOne Tree\n\t\t\t</label>\n\t\t\t<label htmlFor=\"trees-many\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.trees==='many'} className=\"align-text-top mr-1\" type=\"radio\" name=\"trees\" id=\"trees-many\" value=\"many\" />\n\t\t\t\tMany Trees\n\t\t\t</label>\n\t\t</fieldset>\n\t\t\n\t\t<fieldset className=\"border-orange-700 border-t-8\">\n\t\t\t<legend className=\"text-orange-800 font-bold pr-2 text-lg\">Frame</legend>\n\t\t\t<label htmlFor=\"frame\">\n\t\t\t\tFrame\n\t\t\t\t<select onChange={handleFilterUpdate} value={getFilters.frame} id=\"frame\" name=\"frame\">\n\t\t\t\t\t<option value=\"*\">Irregardless of Frame</option>\n\t\t\t\t\t<option value=\"none\">No Frame</option>\n\t\t\t\t\t<option value=\"any\">Any Frame</option>\n\t\t\t\t\t<optgroup label=\"Specific Frame\"></optgroup>\n\t\t\t\t\t<option value=\"rectangle_3d_frame\"\t> 3D Rectangle\t</option>\n\t\t\t\t\t<option value=\"apple_frame\"\t\t\t> Apple\t\t\t</option>\n\t\t\t\t\t<option value=\"circle_frame\"\t\t> Circle\t\t</option>\n\t\t\t\t\t<option value=\"double_oval_frame\"\t> Double Oval\t</option>\n\t\t\t\t\t<option value=\"florida_frame\"\t\t> Florida\t\t</option>\n\t\t\t\t\t<option value=\"half_circle_frame\"\t> Half Circle\t</option>\n\t\t\t\t\t<option value=\"half_oval_frame\"\t\t> Half Oval\t\t</option>\n\t\t\t\t\t<option value=\"oval_frame\"\t\t\t> Oval\t\t\t</option>\n\t\t\t\t\t<option value=\"rectangular_frame\"\t> Rectangular\t</option>\n\t\t\t\t\t<option value=\"seashell_frame\"\t\t> Seashell\t\t</option>\n\t\t\t\t\t<option value=\"split_frame\"\t\t\t> Split\t\t\t</option>\n\t\t\t\t\t<option value=\"tomb_frame\"\t\t\t> Tomb\t\t\t</option>\n\t\t\t\t\t<option value=\"triple_frame\"\t\t> Triple\t\t</option>\n\t\t\t\t\t<option value=\"window_frame\"\t\t> Window\t\t</option>\n\t\t\t\t\t<option value=\"wood_framed\"\t\t\t> Wood\t\t\t</option>\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t</fieldset>\n\t\n\t\t<fieldset data-special-checkboxes className=\"border-blue-700 border-t-8\">\n\t\t\t<legend className=\"text-blue-800 font-bold pr-2 text-lg\">Water Element</legend>\n\t\t\t<i class=\"float-right text-gray-500\">Check all that apply</i>\n\t\t\t<label htmlFor=\"water-*\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='*'} data-checked-alone\t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-*\" value=\"*\" />\n\t\t\t\tIrregardless of any Water Elements\n\t\t\t</label>\n\t\t\t<label htmlFor=\"water-any\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='any'} data-checked-alone\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-any\" value=\"any\" />\n\t\t\t\tAny Water Element\n\t\t\t</label>\n\t\t\t<label htmlFor=\"water-none\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='none'} data-checked-alone\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-none\" value=\"none\" />\n\t\t\t\tNo Water Element\n\t\t\t</label>\n\t\t\t<br/>\n\t\t\t<label htmlFor=\"water-dock\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='dock'} \t\t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-dock\" value=\"dock\" />\n\t\t\t\tDock\n\t\t\t</label>\n\t\t\t<label htmlFor=\"water-lake\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='lake'} \t\t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-lake\" value=\"lake\" />\n\t\t\t\tLake\n\t\t\t</label>\n\t\t\t{/* The CSV has a column for \"lakes\" but no ross is set as having \"lakes\" only \"lake\" so I'm hiding this here so the code is \"complete\" but not useless\n\t\t\t<label htmlFor=\"water-lakes\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='lakes'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-lakes\" value=\"lakes\" />\n\t\t\t\tLakes\n\t\t\t</label>*/}\n\t\t\t<label htmlFor=\"water-lighthouse\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='lighthouse'} \tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-lighthouse\" value=\"lighthouse\" />\n\t\t\t\tLighthouse\n\t\t\t</label>\n\t\t\t<label htmlFor=\"water-ocean\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='ocean'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-ocean\" value=\"ocean\" />\n\t\t\t\tOcean\n\t\t\t</label>\n\t\t\t<label htmlFor=\"water-river\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='river'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-river\" value=\"river\" />\n\t\t\t\tRiver\n\t\t\t</label>\n\t\t\t<label htmlFor=\"water-waterfall\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='waterfall'} \tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-waterfall\" value=\"waterfall\" />\n\t\t\t\tWaterfall\n\t\t\t</label>\n\t\t\t<label htmlFor=\"water-waves\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.water==='waves'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"water\" id=\"water-waves\" value=\"waves\" />\n\t\t\t\tWaves\n\t\t\t</label>\n\t\t</fieldset>\n\n\t\t<fieldset data-special-checkboxes className=\"border-pink-700 border-t-8\">\n\t\t\t<legend className=\"text-pink-800 font-bold pr-2 text-lg\">Manmade Objects</legend>\n\t\t\t<i class=\"float-right text-gray-500\">Check all that apply</i>\n\t\t\t<label htmlFor=\"manmade-*\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='*'} data-checked-alone\t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-*\" value=\"*\" />\n\t\t\t\tIrregardless of any Man Made Objects\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-any\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='any'} data-checked-alone\t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-any\" value=\"any\" />\n\t\t\t\tAny Man Made Objects\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-none\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='none'} data-checked-alone\t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-none\" value=\"none\" />\n\t\t\t\tNo Man Made Objects\n\t\t\t</label>\n\t\t\t<br/>\n\t\t\t<label htmlFor=\"manmade-barn\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='barn'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-barn\" value=\"barn\" />\n\t\t\t\tBarn\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-boat\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='boat'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-boat\" value=\"boat\" />\n\t\t\t\tBoat\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-bridge\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='bridge'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-bridge\" value=\"bridge\" />\n\t\t\t\tBridge\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-building\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='building'} \tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-building\" value=\"building\" />\n\t\t\t\tBuilding\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-cabin\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='cabin'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-cabin\" value=\"cabin\" />\n\t\t\t\tCabin\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-dock\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='dock'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-dock\" value=\"dock\" />\n\t\t\t\tDock\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-farm\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='farm'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-farm\" value=\"farm\" />\n\t\t\t\tFarm\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-fence\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='fence'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-fence\" value=\"fence\" />\n\t\t\t\tFence\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-fire\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='fire'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-fire\" value=\"fire\" />\n\t\t\t\tFire\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-lighthouse\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='lighthouse'} \tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-lighthouse\" value=\"lighthouse\" />\n\t\t\t\tLighthouse\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-path\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='path'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-path\" value=\"path\" />\n\t\t\t\tPath\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-person\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='person'} \t\tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-person\" value=\"person\" />\n\t\t\t\tPerson\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-structure\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='structure'} \tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-structure\" value=\"structure\" />\n\t\t\t\tStructure\n\t\t\t</label>\n\t\t\t<label htmlFor=\"manmade-windmill\" className=\"mr-3 whitespace-no-wrap\">\n\t\t\t\t<input onClick={handleFilterUpdate} defaultChecked={getFilters.manmade==='windmill'} \tclassName=\"align-text-top mr-1\" type=\"checkbox\" name=\"manmade\" id=\"manmade-windmill\" value=\"windmill\" />\n\t\t\t\tWindmill\n\t\t\t</label>\n\n\n\n\t\t</fieldset>\n\n\t</form>);\n}\n","import React, {useContext, useMemo} from 'react';\n\n// The actual filter component\nexport default function Ross(props) {\n\n\t// In order to not re-loop the ross details we will useMemo them. This only needs to do once since they don't change.\n\tlet rossFeatures = useMemo(()=>{\n\t\tlet features = [];\n\t\tObject.keys(props.details).forEach((key)=>{\n\t\t\tif(props.details[key]==='1'){\n\t\t\t\tfeatures.push(key)\n\t\t\t}\n\t\t})\n\t\treturn features\n\t},[props.details])\n\n\treturn (<li className=\"p-3 w-full md:w-1/2 lg:w-1/3 xl:w-1/4\">\n\t\t<h3 className=\"font-extrabold text-center\">{props.details.EPISODE+' - '+props.details.TITLE}</h3>\n\t\t<span className=\"font-light italic lowercase text-gray-600\">{rossFeatures.map(c=>c.replace('_',' ').toLowerCase()).join(', ')}</span>\n\t</li>);\n}\n","import React, {useContext,useState,useEffect,useMemo} from 'react';\nimport {FilterContext} from './Filters.js';\nimport Parser from 'papaparse';\nimport Ross from './Ross.js';\n\n// This is the location of that ross data file\nconst rossData = 'https://raw.githubusercontent.com/fivethirtyeight/data/master/bob-ross/elements-by-episode.csv';\n\nexport function Rosses(){\n\n\t// grad the FilterContext to determine the correct Rosses to show\n\tconst {getFilters,setFilters} = useContext(FilterContext)\n\n\t// We use a little state here, one for the data (that we only load once) and one for the results (which we fiddle with)\n\tconst [getRosses,setRosses] = useState([]);\n\tconst [getFilteredRosses,setFilteredRosses] = useState([])\n\t// And maybe another to keep track of sets of filters so we don't have to refigure that every render\n\tconst [getFilterDetails,setFilterDetails] = useState({})\n\n\t// Once the filters have loaded process the more complex ones to build out arrays needed to actually filter. It was this or manually make them.\n\tuseEffect(()=>{\n\t\tlet buildFilterDetails = getFilterDetails;\n\t\tdocument.querySelectorAll('fieldset').forEach((fieldset)=>{\n\t\t\t// filters can consist of many inputs or a single selector (for now)\n\t\t\tlet name = fieldset.querySelector('input,select').name;\n\t\t\tbuildFilterDetails[name] = [];\n\t\t\t// This will fill that build array with all the possible options \n\t\t\tfieldset.querySelectorAll('input').forEach((input)=>{\n\t\t\t\tbuildFilterDetails[name].push(input.value)\n\t\t\t})\n\t\t\tfieldset.querySelectorAll('select option').forEach((option)=>{\n\t\t\t\tbuildFilterDetails[name].push(option.value)\n\t\t\t})\n\t\t\t// This will filter out and of the specially handled values, as we don't need them for this.\n\t\t\tObject.keys(buildFilterDetails).forEach((key)=>{\n\t\t\t\tbuildFilterDetails[key] = buildFilterDetails[key].filter((option)=>{\n\t\t\t\t\tif(['*','any','none'].indexOf(option)>-1){\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\treturn true\n\t\t\t\t})\n\t\t\t})\n\t\t});\n\t\tsetFilterDetails(buildFilterDetails);\n\t},[])\n\n\t// Load the rosses\n\tuseEffect(()=>{\n\t\tParser.parse(rossData, {\n\t\t\theader: true,\n\t\t\tdownload: true,\n\t\t\tskipEmptyLines: true,\n\t\t\tcomplete: function(results) {\n\t\t\t\tsetRosses(results.data)\n\t\t\t}\n\t\t});\n\t},[])\n\n\t// Filter the Rosses\n\tuseEffect(()=>{\n\t\tlet filteredRosses = getRosses;\n\t\tObject.keys(getFilters).forEach((filter)=>{\n\n\t\t\t// * means skip, otherwise start filtering the ross \n\t\t\tif(getFilters[filter]!=='*'){\n\t\t\t\tfilteredRosses = filteredRosses.filter((ross)=>{\n\n\t\t\t\t\t// any means, well, any of the below filter options \n\t\t\t\t\tif(getFilters[filter]==='any'){\n\t\t\t\t\t\tlet thisRossKept = false; // once we know it's true we don't need to bother\n\t\t\t\t\t\tgetFilterDetails[filter].forEach((option)=>{\n\t\t\t\t\t\t\tif(thisRossKept===false){\n\t\t\t\t\t\t\t\tif(ross[option.toUpperCase()]==='1'){\n\t\t\t\t\t\t\t\t\tthisRossKept = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\treturn thisRossKept\n\n\t\t\t\t\t// none means none of the filter options\n\t\t\t\t\t}else if(getFilters[filter]==='none'){\n\t\t\t\t\t\tlet thisRossKept = true;\n\t\t\t\t\t\tgetFilterDetails[filter].forEach((option)=>{\n\t\t\t\t\t\t\tif(thisRossKept===true){\n\t\t\t\t\t\t\t\tif(ross[option.toUpperCase()]==='1'){\n\t\t\t\t\t\t\t\t\tthisRossKept = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\treturn thisRossKept\n\n\t\t\t\t\t// This is the others, some things that may not be covered by the above, including handling individual options\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlet thisFiltersValues = getFilters[filter].split(',');\n\t\t\t\t\t\tlet thisRossKept = true\n\t\t\t\t\t\tthisFiltersValues.forEach((filterValue)=>{\n\n\t\t\t\t\t\t\t// Sometimes we may need to adjust the filters, switch it\n\t\t\t\t\t\t\tlet rossKeys = [filterValue.toUpperCase()];\n\t\t\t\t\t\t\tlet checkValues = ['1']; // the CSV contains strings on 1 or 0\n\t\t\t\t\t\t\tswitch(filter){\n\t\t\t\t\t\t\t\tcase 'trees':\n\t\t\t\t\t\t\t\t\tswitch(filterValue){\n\t\t\t\t\t\t\t\t\t\tcase 'no':\n\t\t\t\t\t\t\t\t\t\t\t// There are two column about trees; TREE and TREES, while the CSV seems to follow the logic I'll check for both since I can\n\t\t\t\t\t\t\t\t\t\t\trossKeys[0] = 'TREE';\n\t\t\t\t\t\t\t\t\t\t\tcheckValues[0] = '0';\n\t\t\t\t\t\t\t\t\t\t\trossKeys[1] = 'TREES';\n\t\t\t\t\t\t\t\t\t\t\tcheckValues[1] = '0';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'one':\n\t\t\t\t\t\t\t\t\t\t\t// A forest has many trees, but a single tree is special\n\t\t\t\t\t\t\t\t\t\t\trossKeys[0] = 'TREE';\n\t\t\t\t\t\t\t\t\t\t\tcheckValues[0] = '1';\n\t\t\t\t\t\t\t\t\t\t\trossKeys[1] = 'TREES';\n\t\t\t\t\t\t\t\t\t\t\tcheckValues[1] = '0';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'many':\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t// Fuck my shit up with some trees\n\t\t\t\t\t\t\t\t\t\t\trossKeys[0] = 'TREES';\n\t\t\t\t\t\t\t\t\t\t\tcheckValues[0] = '1';\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t// the pre-set value of rossKey is the default\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// We default to the ross staying, but sometimes it sadly must go. Tis better to have Rossed and lost then never to have Rossed at all.\n\t\t\t\t\t\t\trossKeys.forEach((rossKey,index)=>{\n\t\t\t\t\t\t\t\tif(ross[rossKey]!==checkValues[index]){\n\t\t\t\t\t\t\t\t\tthisRossKept = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\treturn thisRossKept\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t\tsetFilteredRosses(filteredRosses);\n\t},[getRosses,getFilters])\n\n\t// The actual output of the Rosses\n\treturn (<div>\n\t\t<pre style={{display:'none'}}>\n\t\t\tThe Rosses, filtered as described above, go here.\n\t\t\tThose filters would be: \n\t\t\t{JSON.stringify(getFilters,null,3)}\n\t\t</pre>\n\t\t<h2 className=\"font-bold text-center text-lg\">Your current filters leave you with {Math.round((getFilteredRosses.length/getRosses.length)*1000)/10}% of paintings matching ({getFilteredRosses.length}/{getRosses.length}).</h2>\n\t\t<ol className=\"container flex flex-wrap mx-auto my-5\">{getFilteredRosses.map((ross,index)=>{\n\t\t\treturn (<Ross key={ross.EPISODE} details={ross} />)\n\t\t})}</ol>\n\t</div>);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// Imports\nimport React, {useState} from 'react';\nimport './styles/compiled.css';\n\n// My Imports\nimport {Filters, filtersDefault, FilterContext} from './Filters.js'\nimport {Rosses} from './Rosses.js'\n\n// The main app function\nexport default function App() {\n\n  const [getFilters,setFilters] = useState(filtersDefault);\n\n  return (\n    <div id=\"find-your-ross\">\n      <FilterContext.Provider value={{getFilters,setFilters}}>\n        <Filters />\n        <Rosses />\n      </FilterContext.Provider>\n    </div>\n  );\n}\n"],"sourceRoot":""}